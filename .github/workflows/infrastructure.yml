name: Deploy Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'apps/backend/kubernetes/**'
      - 'apps/backend/terraform/**'

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: draftfrat-cluster
      ZONE: us-central1-a
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      PROJECT_ID: draftfrat

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.5
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform -chdir=apps/backend/terraform init
      - name: Terraform Plan
        run: |
          terraform -chdir=apps/backend/terraform plan -out=tfplan -var "cluster_name=${CLUSTER_NAME}" \
          -var "zone=${ZONE}" -var "cloudflare_api_key=${{ secrets.CLOUDFLARE_API_KEY }}" \
          -var "cloudflare_email=${{ secrets.CLOUD_FLARE_EMAIL }}" \
          -var "cloudflare_account_id=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" \
          -var "domain_verification_token=${{ secrets.DOMAIN_VERIFICATION_TOKEN }}" \
          -var "mongodb_public_key=${{ secrets.MONGODB_PUBLIC_KEY }}" \
          -var "mongodb_private_key=${{ secrets.MONGODB_PRIVATE_KEY }}" \
          -var "mongodb_user_name=${{ secrets.MONGODB_USER_NAME }}" \
          -var "mongodb_user_password=${{ secrets.MONGODB_USER_PASSWORD }}" \
          -var "neon_api_key=${{ secrets.NEON_API_KEY }}"
      - name: Terraform Apply
        id: terraform_apply
        run: |
            # Run Terraform apply and suppress output to only what's necessary
            terraform -chdir=apps/backend/terraform apply -auto-approve tfplan
            MONGODB_CONNECTION_STRING=$(terraform -chdir=apps/backend/terraform output -raw mongodb_connection_string)
            POSTGRES_HOST=$(terraform -chdir=apps/backend/terraform output -raw postgres_host)
            POSTGRES_PASSWORD=$(terraform -chdir=apps/backend/terraform output -raw postgres_password)
            LOADBALANCER_IP=$(terraform -chdir=apps/backend/terraform output -raw static_ip)
            echo "LOADBALANCER_IP=$LOADBALANCER_IP" >> $GITHUB_ENV
            echo "POSTGRES_HOST=$POSTGRES_HOST" >> $GITHUB_ENV
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> $GITHUB_ENV
            echo "MONGODB_CONNECTION_STRING=$MONGODB_CONNECTION_STRING" >> $GITHUB_ENV
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      - name: Install gke-cloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Build frontend
        run: |
          cd apps/frontend/web
          echo "VITE_SERVER_URL=https://api.draftfrat.com" >> .env
          npm install
          npm run build
          gsutil -m rsync -r -d dist/ gs://draftfrat.com/
      - name: Get GKE credentials
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${ZONE} --project ${PROJECT_ID}

      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Create namespace
        run: |
          kubectl get namespace prod || kubectl create namespace prod

      - name: Install/upgrade helm chart
        run: |
          helm upgrade --install draftfrat-release-prod apps/backend/kubernetes \
          -f apps/backend/kubernetes/values.yaml \
          -f apps/backend/kubernetes/values-prod.yaml \
          --set ingress-nginx.controller.service.loadBalancerIP=$LOADBALANCER_IP \
          --set directMessaging.config.data.DIRECT_MESSAGING_MONGODB_URL="$MONGODB_CONNECTION_STRING" \
          --set users.config.data.DATASOURCE_URL="jdbc:postgresql://$POSTGRES_HOST/users?sslmode=require" \
          --set users.config.data.DATASOURCE_USERNAME=neondb_owner \
          --set users.config.data.DATASOURCE_PASSWORD="$POSTGRES_PASSWORD" \
          --set users.config.data.JWT_SECRET="$POSTGRES_PASSWORD" \
          --namespace prod