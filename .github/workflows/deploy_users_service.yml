name: CI/CD Pipeline for GKE with Terraform

on:
  push:
    branches:
      - test

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/draftbash-repo/users-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Authenticate with Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Step 2: Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      # Step 3: Configure Docker to use Google Artifact Registry
      - name: Configure Docker for Google Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      # Step 4: Build Docker image with dynamic tag (using Git SHA as version)
      - name: Build Docker Image
        run: |
          cd apps/backend/services/users
          docker build -t $IMAGE_NAME:latest .

      # Step 5: Push Docker image to Artifact Registry
      - name: Push Docker Image to Google Artifact Registry
        run: |
          docker push $IMAGE_NAME:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/draftbash-repo/users-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      - name: Install gke-cloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      # Step 6: Authenticate with Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Step 7: Configure kubectl to use the GKE cluster
      - name: Get GKE credentials
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          gcloud container clusters get-credentials draftbash-cluster --zone ${{ secrets.GCP_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

      # Step 10: Deploy to GKE
      - name: Deploy to GKE
        run: |
          kubectl set image deployment/draftbash-deployment draftbash-container=$IMAGE_NAME:latest
          kubectl rollout restart deployment draftbash-deployment
          kubectl rollout status deployment/draftbash-deployment --timeout=5m